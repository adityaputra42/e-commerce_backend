// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payment (
 transaction_id,
 total_payment,
 status
) VALUES (
  $1, $2 ,$3
)
RETURNING id, transaction_id, total_payment, status, updated_at, created_at
`

type CreatePaymentParams struct {
	TransactionID string  `json:"transaction_id"`
	TotalPayment  float64 `json:"total_payment"`
	Status        string  `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment, arg.TransactionID, arg.TotalPayment, arg.Status)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.TotalPayment,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payment
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, transaction_id, total_payment, status, updated_at, created_at FROM payment
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.TotalPayment,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentForUpdate = `-- name: GetPaymentForUpdate :one
SELECT id, transaction_id, total_payment, status, updated_at, created_at FROM payment
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPaymentForUpdate(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentForUpdate, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.TotalPayment,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listPayment = `-- name: ListPayment :many
SELECT id, transaction_id, total_payment, status, updated_at, created_at FROM payment
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPayment(ctx context.Context, arg ListPaymentParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.TotalPayment,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payment
 set status = $2
WHERE id = $1
RETURNING id, transaction_id, total_payment, status, updated_at, created_at
`

type UpdatePaymentParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment, arg.ID, arg.Status)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.TotalPayment,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
