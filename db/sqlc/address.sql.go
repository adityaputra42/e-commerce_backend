// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: address.sql

package db

import (
	"context"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (
 uid,
 recipient_name,
 recipient_phone_number,
 province,
 city,
 district,
 village,
 postal_code,
 full_address
) VALUES (
  $1, $2 ,$3 ,$4,$5,$6,$7,$8,$9
)
RETURNING id, uid, recipient_name, recipient_phone_number, province, city, district, village, postal_code, full_address, updated_at, created_at, deleted_at
`

type CreateAddressParams struct {
	Uid                  string `json:"uid"`
	RecipientName        string `json:"recipient_name"`
	RecipientPhoneNumber string `json:"recipient_phone_number"`
	Province             string `json:"province"`
	City                 string `json:"city"`
	District             string `json:"district"`
	Village              string `json:"village"`
	PostalCode           string `json:"postal_code"`
	FullAddress          string `json:"full_address"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.Uid,
		arg.RecipientName,
		arg.RecipientPhoneNumber,
		arg.Province,
		arg.City,
		arg.District,
		arg.Village,
		arg.PostalCode,
		arg.FullAddress,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.RecipientName,
		&i.RecipientPhoneNumber,
		&i.Province,
		&i.City,
		&i.District,
		&i.Village,
		&i.PostalCode,
		&i.FullAddress,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
Update address
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAddress, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT id, uid, recipient_name, recipient_phone_number, province, city, district, village, postal_code, full_address, updated_at, created_at, deleted_at FROM address
WHERE deleted_at IS NOT NULL AND  id = $1 LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id int64) (Address, error) {
	row := q.db.QueryRow(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.RecipientName,
		&i.RecipientPhoneNumber,
		&i.Province,
		&i.City,
		&i.District,
		&i.Village,
		&i.PostalCode,
		&i.FullAddress,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAddressForUpdate = `-- name: GetAddressForUpdate :one
SELECT id, uid, recipient_name, recipient_phone_number, province, city, district, village, postal_code, full_address, updated_at, created_at, deleted_at FROM address
WHERE id = $1 LIMIT 1 AND deleted_at IS NOT NULL
FOR NO KEY UPDATE
`

func (q *Queries) GetAddressForUpdate(ctx context.Context, id int64) (Address, error) {
	row := q.db.QueryRow(ctx, getAddressForUpdate, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.RecipientName,
		&i.RecipientPhoneNumber,
		&i.Province,
		&i.City,
		&i.District,
		&i.Village,
		&i.PostalCode,
		&i.FullAddress,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAddress = `-- name: ListAddress :many
SELECT id, uid, recipient_name, recipient_phone_number, province, city, district, village, postal_code, full_address, updated_at, created_at, deleted_at FROM address
WHERE deleted_at IS NOT NULL AND uid = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAddressParams struct {
	Uid    string `json:"uid"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListAddress(ctx context.Context, arg ListAddressParams) ([]Address, error) {
	rows, err := q.db.Query(ctx, listAddress, arg.Uid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.RecipientName,
			&i.RecipientPhoneNumber,
			&i.Province,
			&i.City,
			&i.District,
			&i.Village,
			&i.PostalCode,
			&i.FullAddress,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE address
 set recipient_name = $2,
 recipient_phone_number = $3,
 province = $4,
 city = $5,
 district = $6,
 village = $7,
 postal_code = $8,
 full_address = $9
WHERE id = $1
RETURNING id, uid, recipient_name, recipient_phone_number, province, city, district, village, postal_code, full_address, updated_at, created_at, deleted_at
`

type UpdateAddressParams struct {
	ID                   int64  `json:"id"`
	RecipientName        string `json:"recipient_name"`
	RecipientPhoneNumber string `json:"recipient_phone_number"`
	Province             string `json:"province"`
	City                 string `json:"city"`
	District             string `json:"district"`
	Village              string `json:"village"`
	PostalCode           string `json:"postal_code"`
	FullAddress          string `json:"full_address"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.ID,
		arg.RecipientName,
		arg.RecipientPhoneNumber,
		arg.Province,
		arg.City,
		arg.District,
		arg.Village,
		arg.PostalCode,
		arg.FullAddress,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.RecipientName,
		&i.RecipientPhoneNumber,
		&i.Province,
		&i.City,
		&i.District,
		&i.Village,
		&i.PostalCode,
		&i.FullAddress,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
