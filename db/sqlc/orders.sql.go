// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
 id,
 transaction_id,
 product_id,
 color_varian_id,
 size_varian_id,
 unit_price,
 subtotal,
 quantity,
 status
) VALUES (
  $1, $2 ,$3, $4, $5, $6, $7, $8, $9
)
RETURNING id, transaction_id, product_id, color_varian_id, size_varian_id, unit_price, subtotal, quantity, status, updated_at, created_at
`

type CreateOrderParams struct {
	ID            string         `json:"id"`
	TransactionID string         `json:"transaction_id"`
	ProductID     int64          `json:"product_id"`
	ColorVarianID int64          `json:"color_varian_id"`
	SizeVarianID  int64          `json:"size_varian_id"`
	UnitPrice     pgtype.Numeric `json:"unit_price"`
	Subtotal      pgtype.Numeric `json:"subtotal"`
	Quantity      int64          `json:"quantity"`
	Status        string         `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.TransactionID,
		arg.ProductID,
		arg.ColorVarianID,
		arg.SizeVarianID,
		arg.UnitPrice,
		arg.Subtotal,
		arg.Quantity,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.ProductID,
		&i.ColorVarianID,
		&i.SizeVarianID,
		&i.UnitPrice,
		&i.Subtotal,
		&i.Quantity,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, transaction_id, product_id, color_varian_id, size_varian_id, unit_price, subtotal, quantity, status, updated_at, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.ProductID,
		&i.ColorVarianID,
		&i.SizeVarianID,
		&i.UnitPrice,
		&i.Subtotal,
		&i.Quantity,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderForUpdate = `-- name: GetOrderForUpdate :one
SELECT id, transaction_id, product_id, color_varian_id, size_varian_id, unit_price, subtotal, quantity, status, updated_at, created_at FROM orders
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetOrderForUpdate(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderForUpdate, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.ProductID,
		&i.ColorVarianID,
		&i.SizeVarianID,
		&i.UnitPrice,
		&i.Subtotal,
		&i.Quantity,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listOrder = `-- name: ListOrder :many
SELECT id, transaction_id, product_id, color_varian_id, size_varian_id, unit_price, subtotal, quantity, status, updated_at, created_at FROM orders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrderParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrder(ctx context.Context, arg ListOrderParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrder, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.ProductID,
			&i.ColorVarianID,
			&i.SizeVarianID,
			&i.UnitPrice,
			&i.Subtotal,
			&i.Quantity,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
 set status = $2
WHERE id = $1
RETURNING id, transaction_id, product_id, color_varian_id, size_varian_id, unit_price, subtotal, quantity, status, updated_at, created_at
`

type UpdateOrderParams struct {
	ID     string `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.ProductID,
		&i.ColorVarianID,
		&i.SizeVarianID,
		&i.UnitPrice,
		&i.Subtotal,
		&i.Quantity,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
