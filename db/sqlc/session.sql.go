// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (
 id,
 user_uid,
 refresh_token,
 user_agent,
 client_ip,
 is_blocked,
 expired_at
) VALUES (
  $1, $2 ,$3,$4,$5,$6,$7
)
RETURNING id, user_uid, refresh_token, user_agent, client_ip, is_blocked, expired_at, created_at
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserUid      string    `json:"user_uid"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiredAt    time.Time `json:"expired_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserUid,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiredAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserUid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_uid, refresh_token, user_agent, client_ip, is_blocked, expired_at, created_at FROM user_sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessionById(ctx context.Context, id uuid.UUID) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserUid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
