// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: color_varian.sql

package db

import (
	"context"
)

const createColorVarianProduct = `-- name: CreateColorVarianProduct :one
INSERT INTO color_varians (
 product_id,
 name,
 color,
 images
) VALUES (
  $1, $2 ,$3 ,$4
)
RETURNING id, product_id, name, color, images, updated_at, created_at, deleted_at
`

type CreateColorVarianProductParams struct {
	ProductID int64  `json:"product_id"`
	Name      string `json:"name"`
	Color     string `json:"color"`
	Images    string `json:"images"`
}

func (q *Queries) CreateColorVarianProduct(ctx context.Context, arg CreateColorVarianProductParams) (ColorVarian, error) {
	row := q.db.QueryRow(ctx, createColorVarianProduct,
		arg.ProductID,
		arg.Name,
		arg.Color,
		arg.Images,
	)
	var i ColorVarian
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Color,
		&i.Images,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteColorVarianProduct = `-- name: DeleteColorVarianProduct :exec
UPDATE color_varians
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteColorVarianProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteColorVarianProduct, id)
	return err
}

const getColorVarianProduct = `-- name: GetColorVarianProduct :one
SELECT id, product_id, name, color, images, updated_at, created_at, deleted_at FROM color_varians
WHERE deleted_at IS NOT NULL AND id = $1 LIMIT 1
`

func (q *Queries) GetColorVarianProduct(ctx context.Context, id int64) (ColorVarian, error) {
	row := q.db.QueryRow(ctx, getColorVarianProduct, id)
	var i ColorVarian
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Color,
		&i.Images,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getColorVarianProductForUpdate = `-- name: GetColorVarianProductForUpdate :one
SELECT id, product_id, name, color, images, updated_at, created_at, deleted_at FROM color_varians
WHERE deleted_at IS NOT NULL AND id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetColorVarianProductForUpdate(ctx context.Context, id int64) (ColorVarian, error) {
	row := q.db.QueryRow(ctx, getColorVarianProductForUpdate, id)
	var i ColorVarian
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Color,
		&i.Images,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listColorVarianProduct = `-- name: ListColorVarianProduct :many
SELECT id, product_id, name, color, images, updated_at, created_at, deleted_at FROM color_varians
WHERE deleted_at IS NOT NULL AND product_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListColorVarianProductParams struct {
	ProductID int64 `json:"product_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListColorVarianProduct(ctx context.Context, arg ListColorVarianProductParams) ([]ColorVarian, error) {
	rows, err := q.db.Query(ctx, listColorVarianProduct, arg.ProductID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ColorVarian{}
	for rows.Next() {
		var i ColorVarian
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Color,
			&i.Images,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateColorVarianProduct = `-- name: UpdateColorVarianProduct :one
UPDATE color_varians
set name = $2,
color = $3,
images = $4
WHERE id = $1
RETURNING id, product_id, name, color, images, updated_at, created_at, deleted_at
`

type UpdateColorVarianProductParams struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Color  string `json:"color"`
	Images string `json:"images"`
}

func (q *Queries) UpdateColorVarianProduct(ctx context.Context, arg UpdateColorVarianProductParams) (ColorVarian, error) {
	row := q.db.QueryRow(ctx, updateColorVarianProduct,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.Images,
	)
	var i ColorVarian
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Color,
		&i.Images,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
