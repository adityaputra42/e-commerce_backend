// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
 uid,
 username,
 full_name,
 email,
 password,
 role
) VALUES (
  $1, $2 ,$3 ,$4,$5,$6
)
RETURNING uid, username, password, full_name, email, role, updated_at, created_at
`

type CreateUserParams struct {
	Uid      string `json:"uid"`
	Username string `json:"username"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Uid,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE uid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uid string) error {
	_, err := q.db.Exec(ctx, deleteUser, uid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT uid, username, password, full_name, email, role, updated_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT uid, username, password, full_name, email, role, updated_at, created_at FROM users
WHERE uid = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRow(ctx, getUserForUpdate, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT uid, username, password, full_name, email, role, updated_at, created_at FROM users
WHERE role = $1
ORDER BY uid 
LIMIT $2
OFFSET $3
`

type ListUserParams struct {
	Role   string `json:"role"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Uid,
			&i.Username,
			&i.Password,
			&i.FullName,
			&i.Email,
			&i.Role,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
 set password = $2
WHERE uid = $1
RETURNING uid, username, password, full_name, email, role, updated_at, created_at
`

type UpdateUserParams struct {
	Uid      string `json:"uid"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Uid, arg.Password)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
