// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
 tx_id,
 address_id,
 shipping_id,
 shipping_price,
 status
) VALUES (
  $1, $2 ,$3, $4, $5
)
RETURNING tx_id, address_id, shipping_id, shipping_price, total_price, status, updated_at, created_at
`

type CreateTransactionParams struct {
	TxID          string         `json:"tx_id"`
	AddressID     int64          `json:"address_id"`
	ShippingID    int64          `json:"shipping_id"`
	ShippingPrice pgtype.Numeric `json:"shipping_price"`
	Status        string         `json:"status"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.TxID,
		arg.AddressID,
		arg.ShippingID,
		arg.ShippingPrice,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.TxID,
		&i.AddressID,
		&i.ShippingID,
		&i.ShippingPrice,
		&i.TotalPrice,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE tx_id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, txID string) error {
	_, err := q.db.Exec(ctx, deleteTransaction, txID)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT tx_id, address_id, shipping_id, shipping_price, total_price, status, updated_at, created_at FROM transactions
WHERE tx_id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, txID string) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, txID)
	var i Transaction
	err := row.Scan(
		&i.TxID,
		&i.AddressID,
		&i.ShippingID,
		&i.ShippingPrice,
		&i.TotalPrice,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionForUpdate = `-- name: GetTransactionForUpdate :one
SELECT tx_id, address_id, shipping_id, shipping_price, total_price, status, updated_at, created_at FROM transactions
WHERE tx_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTransactionForUpdate(ctx context.Context, txID string) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionForUpdate, txID)
	var i Transaction
	err := row.Scan(
		&i.TxID,
		&i.AddressID,
		&i.ShippingID,
		&i.ShippingPrice,
		&i.TotalPrice,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listTransaction = `-- name: ListTransaction :many
SELECT tx_id, address_id, shipping_id, shipping_price, total_price, status, updated_at, created_at FROM transactions
ORDER BY tx_id
LIMIT $1
OFFSET $2
`

type ListTransactionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransaction(ctx context.Context, arg ListTransactionParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransaction, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.TxID,
			&i.AddressID,
			&i.ShippingID,
			&i.ShippingPrice,
			&i.TotalPrice,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
 set status = $2
WHERE tx_id = $1
RETURNING tx_id, address_id, shipping_id, shipping_price, total_price, status, updated_at, created_at
`

type UpdateTransactionParams struct {
	TxID   string `json:"tx_id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction, arg.TxID, arg.Status)
	var i Transaction
	err := row.Scan(
		&i.TxID,
		&i.AddressID,
		&i.ShippingID,
		&i.ShippingPrice,
		&i.TotalPrice,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
