// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment_method.sql

package db

import (
	"context"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_method (
 account_name,
 account_number,
 bank_name,
 bank_images
) VALUES (
  $1, $2 ,$3, $4
)
RETURNING id, account_name, account_number, bank_name, bank_images, updated_at, created_at, deleted_at
`

type CreatePaymentMethodParams struct {
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	BankName      string `json:"bank_name"`
	BankImages    string `json:"bank_images"`
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRow(ctx, createPaymentMethod,
		arg.AccountName,
		arg.AccountNumber,
		arg.BankName,
		arg.BankImages,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.BankImages,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deletePaymentMethod = `-- name: DeletePaymentMethod :exec
UPDATE payment_method
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeletePaymentMethod(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePaymentMethod, id)
	return err
}

const getPaymentMethod = `-- name: GetPaymentMethod :one
SELECT id, account_name, account_number, bank_name, bank_images, updated_at, created_at, deleted_at FROM payment_method
WHERE deleted_at IS NOT NULL AND id = $1 LIMIT 1
`

func (q *Queries) GetPaymentMethod(ctx context.Context, id int64) (PaymentMethod, error) {
	row := q.db.QueryRow(ctx, getPaymentMethod, id)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.BankImages,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPaymentMethodForUpdate = `-- name: GetPaymentMethodForUpdate :one
SELECT id, account_name, account_number, bank_name, bank_images, updated_at, created_at, deleted_at FROM payment_method
WHERE deleted_at IS NOT NULL AND id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPaymentMethodForUpdate(ctx context.Context, id int64) (PaymentMethod, error) {
	row := q.db.QueryRow(ctx, getPaymentMethodForUpdate, id)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.BankImages,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listPaymentMethod = `-- name: ListPaymentMethod :many
SELECT id, account_name, account_number, bank_name, bank_images, updated_at, created_at, deleted_at FROM payment_method
WHERE deleted_at IS NOT NULL
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentMethodParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaymentMethod(ctx context.Context, arg ListPaymentMethodParams) ([]PaymentMethod, error) {
	rows, err := q.db.Query(ctx, listPaymentMethod, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.AccountName,
			&i.AccountNumber,
			&i.BankName,
			&i.BankImages,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :one
UPDATE payment_method
 set account_name = $2,
 account_number = $3,
 bank_name = $4,
 bank_images = $5
WHERE id = $1
RETURNING id, account_name, account_number, bank_name, bank_images, updated_at, created_at, deleted_at
`

type UpdatePaymentMethodParams struct {
	ID            int64  `json:"id"`
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	BankName      string `json:"bank_name"`
	BankImages    string `json:"bank_images"`
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRow(ctx, updatePaymentMethod,
		arg.ID,
		arg.AccountName,
		arg.AccountNumber,
		arg.BankName,
		arg.BankImages,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.BankName,
		&i.BankImages,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
