// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
 category_id,
 name,
 description,
 images,
 rating,
 price
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, category_id, name, description, images, rating, price, updated_at, created_at
`

type CreateProductParams struct {
	CategoryID  int64          `json:"category_id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Images      pgtype.Text    `json:"images"`
	Rating      pgtype.Numeric `json:"rating"`
	Price       pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Images,
		arg.Rating,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Images,
		&i.Rating,
		&i.Price,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, category_id, name, description, images, rating, price, updated_at, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Images,
		&i.Rating,
		&i.Price,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, category_id, name, description, images, rating, price, updated_at, created_at FROM products
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProductForUpdate, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Images,
		&i.Rating,
		&i.Price,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, category_id, name, description, images, rating, price, updated_at, created_at FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Images,
			&i.Rating,
			&i.Price,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
 set category_id = $2,
 name = $3,
 description= $4,
 images= $5,
 rating= $6,
 price= $7
WHERE id = $1
RETURNING id, category_id, name, description, images, rating, price, updated_at, created_at
`

type UpdateProductParams struct {
	ID          int64          `json:"id"`
	CategoryID  int64          `json:"category_id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Images      pgtype.Text    `json:"images"`
	Rating      pgtype.Numeric `json:"rating"`
	Price       pgtype.Numeric `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Images,
		arg.Rating,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Images,
		&i.Rating,
		&i.Price,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
